{"version":3,"sources":["components/table/TableComponent.tsx","components/table/TestComponent.tsx","components/starter/starterComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","color","table","minWidth","t","backgroundColor","overflow","position","zIndex","width","createData","name","calories","fat","carbs","protein","rows","TableComponent","classes","useState","currency","amount","date","className","style","TableContainer","height","Table","stickyHeader","TableHead","TableRow","TableCell","left","background","borderRight","borderColor","TableBody","map","row","scope","TestComponent","drawerWidth","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","marginTop","textAlign","contentShift","PersistentDrawerLeft","useTheme","React","open","setOpen","CssBaseline","AppBar","clsx","Toolbar","IconButton","onClick","edge","Typography","variant","noWrap","Drawer","anchor","paper","direction","Divider","List","text","index","ListItem","button","ListItemIcon","ListItemText","primary","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e42b3a98.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport GridComponent from './components/table/table';\r\nimport { Column, UseTableRowProps } from \"react-table\";\r\nimport { IColumn } from './components/table/types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    color: {\r\n        color: \"red\"\r\n    },\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n    t: {\r\n        \"& .th\": {\r\n            backgroundColor: \"#fff\",\r\n            overflow: \"hidden\"\r\n        },\r\n        \"& .tr\": {\r\n            backgroundColor: \"#fff\",\r\n            overflow: \"hidden\"\r\n        },\r\n        \"& .sticky\": {\r\n            overflow: \"auto\",\r\n            position: \"sticky\",\r\n            zIndex: 1,\r\n            width: \"fit-content\"\r\n        }\r\n    }\r\n\r\n});\r\n\r\nfunction createData(name: any, calories: any, fat: any, carbs: any, protein: any) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\n\r\nfunction TableComponent() {\r\n    const classes = useStyles();\r\n    const [page, setPage] = useState(0);\r\n    const [perPage, setPerPage] = useState(5);\r\n    const [data, setData] = useState([\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 10000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 11000,\r\n            date: \"2020-02-01\"\r\n        },\r\n        {\r\n            currency: \"GBP\",\r\n            amount: 12000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 10000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 11000,\r\n            date: \"2020-02-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 10000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 11000,\r\n            date: \"2020-02-01\"\r\n        },\r\n        {\r\n            currency: \"GBP\",\r\n            amount: 12000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 10000,\r\n            date: \"2020-01-01\"\r\n        },\r\n        {\r\n            currency: \"EUR\",\r\n            amount: 11000,\r\n            date: \"2020-02-01\"\r\n        }\r\n    ]);\r\n\r\n    interface IData {\r\n        currency: string,\r\n        amount: number,\r\n        date: string\r\n    }\r\n\r\n    const columns: IColumn<IData> = [\r\n        {\r\n            Header: \"Currency\",\r\n            accessor: \"currency\",\r\n            sticky: \"left\",\r\n            width: 200,\r\n            minWidth: 200\r\n        },\r\n        {\r\n            Header: \"Amount\",\r\n            accessor: \"amount\",\r\n            width: 200,\r\n            minWidth: 200,\r\n            sticky: \"left\"\r\n        },\r\n        {\r\n            Header: \"Date\",\r\n            accessor: \"date\",\r\n            width: 800,\r\n            minWidth: 800\r\n        }\r\n\r\n    ];\r\n\r\n    const onPageChange = (page: number) => {\r\n        setData([\r\n            {\r\n                currency: \"EUR 1\",\r\n                amount: 10000,\r\n                date: \"2020-01-01\"\r\n            },\r\n            {\r\n                currency: \"EUR\",\r\n                amount: 11000,\r\n                date: \"2020-02-01\"\r\n            },\r\n            {\r\n                currency: \"GBP\",\r\n                amount: 12000,\r\n                date: \"2020-01-01\"\r\n            },\r\n            {\r\n                currency: \"EUR\",\r\n                amount: 10000,\r\n                date: \"2020-01-01\"\r\n            },\r\n            {\r\n                currency: \"EUR\",\r\n                amount: 11000,\r\n                date: \"2020-02-01\"\r\n            }\r\n        ]);\r\n        console.log(\"Manual Page\");\r\n        setPage(page);\r\n    }\r\n\r\n    const onChangePerPage = (value: number) => {\r\n        console.log(\"Manual Per Page\");\r\n        setPage(0);\r\n        setPerPage(value);\r\n    }\r\n\r\n    const isRowSelectable = (row: UseTableRowProps<any>) => {\r\n        if (row.values?.currency === \"GBP\") return true;\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <GridComponent\r\n                columns={columns}\r\n                data={data}\r\n                enablePagination={true}\r\n                manualPagination={false}\r\n                rowPerPageOptions={[5, 10, 25, 50]}\r\n                count={10}\r\n                pageSizePerPage={perPage}\r\n                indexOfPage={page}\r\n                onPageChange={onPageChange}\r\n                onChangePerPage={onChangePerPage}\r\n                totalPages={2}\r\n                // ncheckBoxSelection={true}\r\n                // selectPageWise={true}\r\n                isRowSelectable={isRowSelectable}\r\n                tooltipMessageForDisabledRow={\"This row is disabled against selection\"}\r\n            /> */}\r\n            <h1 className={classes.color}>Testing</h1>\r\n            <div style={{ width: \"100%\", position:\"relative\"}}>\r\n                <TableContainer style={{ height: \"200px\" }} className={classes.color}>\r\n                    <Table stickyHeader={true} aria-label=\"simple table\">\r\n                        <TableHead className=\"th\">\r\n                            <TableRow>\r\n                                <TableCell style={{\r\n                                    width: \"180px\",\r\n                                    position: \"absolute\",\r\n                                    left: 0,\r\n                                    background: \"#fafafa\",\r\n                                    zIndex: 3\r\n                                }}>Dessert (100g serving)</TableCell>\r\n                                <TableCell style={{\r\n                                    width: \"200px\",\r\n                                    position: \"absolute\",\r\n                                    left: \"180px\",\r\n                                    background: \"#fafafa\",\r\n                                    zIndex: 3,\r\n                                    borderRight: \"1px solid\",\r\n                                    borderColor: \"rgba(224, 224, 224, 1)\"\r\n                                }}>Calories</TableCell>\r\n                                <TableCell style={{ width: \"300px\" }}>Fat&nbsp;(g)</TableCell>\r\n                                <TableCell style={{ width: \"300px\" }}>Carbs&nbsp;(g)</TableCell>\r\n                                <TableCell style={{ width: \"300px\" }}>Protein&nbsp;(g)</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <TableRow key={row.name} className=\"tr\">\r\n                                    <TableCell scope=\"row\" style={{\r\n                                        width: \"180px\",\r\n                                        position: \"absolute\",\r\n                                        left: \"0px\",\r\n                                        background: \"white\"\r\n                                    }}>\r\n                                        {row.name}\r\n                                    </TableCell>\r\n                                    <TableCell style={{\r\n                                        width: \"200px\",\r\n                                        position: \"absolute\",\r\n                                        left: \"180px\",\r\n                                        background: \"white\",\r\n                                        borderRight: \"1px solid\",\r\n                                        borderColor: \"rgba(224, 224, 224, 1)\"\r\n                                    }}>{row.calories}</TableCell>\r\n                                    <TableCell style={{ width: \"300px\" }}>{row.fat}</TableCell>\r\n                                    <TableCell style={{ width: \"300px\" }}>{row.carbs}</TableCell>\r\n                                    <TableCell style={{ width: \"300px\" }}>{row.protein}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableComponent;\r\n","import React, { useState } from 'react'\r\nimport GridComponent from './components/table/table';\r\nimport { Column, UseTableRowProps } from \"react-table\";\r\nimport { IColumn } from './components/table/types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    color: {\r\n        color: \"green\"\r\n    }\r\n});\r\n\r\nfunction TestComponent() {\r\n    const classes = useStyles();\r\n    return (\r\n     <h1 className={classes.color}>Testing</h1>\r\n    )\r\n}\r\n\r\nexport default TestComponent;\r\n","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport TableComponent from '../table/TableComponent';\r\nimport TestComponent from '../table/TestComponent';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create(['margin', 'width'], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  drawerHeader: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n    justifyContent: 'flex-end',\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginLeft: -drawerWidth,\r\n    marginTop: 64,\r\n    textAlign: \"left\"\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create('margin', {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 0,\r\n  },\r\n}));\r\n\r\nexport default function PersistentDrawerLeft() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            React-Table-Example\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"left\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        <TestComponent/>\r\n        <TableComponent/>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport PersistentDrawerRight from './components/starter/starterComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PersistentDrawerRight/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}